import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { fetchUserDetails, fetchUsers } from './userAPI';

const initialState = {
  // error: false,
  result:null,
  status:'idle',
  userDetail:null
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllUsers = createAsyncThunk(
  'users/getAll',
  async () => {
    console.log('hii')
        const response = await fetchUsers();
        console.log('response',response)
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    
  }
);
export const getUserDetails = createAsyncThunk(
  'users/details',
  async (id) => {
    console.log('hii')
        const response = await fetchUserDetails(id);
        console.log('response',response)
        // The value we return becomes the `fulfilled` action payload
        return response.data;
    
  }
);

export const userSlice = createSlice({
  name: 'users',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllUsers.pending, (state) => {
        console.log('pending')
        state.status = 'loading';
      })
      .addCase(getAllUsers.fulfilled, (state, action) => {
        state.status = 'idle';
        state.result = action.payload;
      })
      .addCase(getUserDetails.pending, (state, action) => {
        state.status = 'loading';
      })
      .addCase(getUserDetails.fulfilled, (state, action) => {
        state.status = 'idle';
        state.userDetail = action.payload;
      });
  },
});


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectUsers = (state) => state.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.


export default userSlice.reducer;
